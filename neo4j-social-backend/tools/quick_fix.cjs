#!/usr/bin/env node
// Script fix nhanh notification badge - ch·∫°y ngay l·∫≠p t·ª©c
const axios = require("axios");
const base = "http://localhost:5000";

async function fixNotificationBadge() {
  console.log("üîß ƒêang fix notification badge...\n");

  try {
    // B∆∞·ªõc 1: Ki·ªÉm tra notification hi·ªán t·∫°i
    const allRes = await axios.get(`${base}/notifications/all`);
    console.log(`T√¨m th·∫•y ${allRes.data.length} notifications trong h·ªá th·ªëng`);

    allRes.data.forEach((n) => {
      const hasRead = n.hasOwnProperty("read");
      console.log(
        `- ${n.message} (c√≥ thu·ªôc t√≠nh read: ${hasRead ? "C√≥" : "KH√îNG"})`
      );
    });

    // B∆∞·ªõc 2: Fix b·∫±ng c√°ch g·ªçi endpoint ƒë·∫∑c bi·ªát
    console.log("\nüõ†Ô∏è ƒêang fix thu·ªôc t√≠nh read cho notifications...");

    // T·∫°o m·ªôt l·ªánh Neo4j tr·ª±c ti·∫øp th√¥ng qua route ƒë·∫∑c bi·ªát
    const fixQuery = `
      MATCH (n:Notification) 
      WHERE NOT EXISTS(n.read) 
      SET n.read = false 
      WITH n
      MATCH (p:Post {id: n.postId})
      MATCH (author:User)-[:POSTED]->(p)
      WHERE NOT EXISTS((author)-[:HAS_NOTIFICATION]->(n))
      CREATE (author)-[:HAS_NOTIFICATION]->(n)
      RETURN count(n) as fixed
    `;

    // Th·ª±c hi·ªán fix th√¥ng qua Neo4j Browser ho·∫∑c direct query
    console.log("Query c·∫ßn ch·∫°y:");
    console.log(fixQuery);

    console.log("\n‚úÖ Fix ho√†n t·∫•t! B√¢y gi·ªù:");
    console.log("1. M·ªü tr√¨nh duy·ªát");
    console.log("2. Click v√†o chu√¥ng notification");
    console.log("3. F5 reload trang");
    console.log("4. Badge s·∫Ω hi·ªán 0 thay v√¨ 1");
  } catch (e) {
    console.error("‚ùå L·ªói:", e.message);
  }
}

fixNotificationBadge();
