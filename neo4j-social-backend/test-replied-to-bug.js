// Test ƒë·ªÉ show bug c·ªßa REPLIED_TO cleanup
import driver from "./db/driver.js";

async function testReplyToBug() {
  const session = driver.session();

  try {
    console.log("üß™ Test REPLIED_TO cleanup bug...");

    // 1. T·∫°o data test
    console.log("1. T·∫°o users v√† posts...");
    await session.run(`
      // X√≥a data c≈© n·∫øu c√≥
      MATCH (u:User {username: 'testUserA'}) DETACH DELETE u;
      MATCH (u:User {username: 'testUserB'}) DETACH DELETE u;
      MATCH (p:Post) WHERE p.content STARTS WITH 'TEST POST' DETACH DELETE p;
      MATCH (c:Comment) WHERE c.content STARTS WITH 'TEST COMMENT' DETACH DELETE c;
      MATCH (n:Notification) WHERE n.message STARTS WITH 'TEST' DETACH DELETE n;
    `);

    await session.run(`
      CREATE (userA:User {id: 'testA', username: 'testUserA', displayName: 'Test A'});
      CREATE (userB:User {id: 'testB', username: 'testUserB', displayName: 'Test B'});
      CREATE (post1:Post {id: 'testPost1', content: 'TEST POST 1'});
      CREATE (post2:Post {id: 'testPost2', content: 'TEST POST 2'});
      CREATE (userA)-[:POSTED]->(post1);
      CREATE (userA)-[:POSTED]->(post2);
    `);

    // 2. UserB comment v√†o c·∫£ 2 posts
    console.log("2. UserB comment v√†o c·∫£ 2 posts...");
    await session.run(`
      MATCH (userB:User {id: 'testB'}), (post1:Post {id: 'testPost1'}), (post2:Post {id: 'testPost2'});
      CREATE (comment1:Comment {id: 'testComment1', content: 'TEST COMMENT 1'});
      CREATE (comment2:Comment {id: 'testComment2', content: 'TEST COMMENT 2'});
      CREATE (comment1)-[:ABOUT]->(post1);
      CREATE (comment2)-[:ABOUT]->(post2);
      CREATE (userB)-[:COMMENTED]->(comment1);
      CREATE (userB)-[:COMMENTED]->(comment2);
    `);

    // 3. T·∫°o REPLIED_TO relationship (gi·∫£ s·ª≠ t·ª´ vi·ªác reply)
    console.log("3. T·∫°o REPLIED_TO relationship...");
    await session.run(`
      MATCH (userA:User {id: 'testA'}), (userB:User {id: 'testB'});
      MERGE (userA)-[:REPLIED_TO]->(userB);
    `);

    // 4. Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi x√≥a
    console.log("4. Tr·∫°ng th√°i TR∆Ø·ªöC khi x√≥a post1:");
    const beforeResult = await session.run(`
      MATCH (userA:User {id: 'testA'})-[r:REPLIED_TO]->(userB:User {id: 'testB'}) 
      RETURN count(r) as replyToCount
    `);
    console.log(
      `   REPLIED_TO relationships: ${beforeResult.records[0].get(
        "replyToCount"
      )}`
    );

    const commentsResult = await session.run(`
      MATCH (userB:User {id: 'testB'})-[:COMMENTED]->(c:Comment) 
      RETURN count(c) as commentCount
    `);
    console.log(
      `   UserB comments: ${commentsResult.records[0].get("commentCount")}`
    );

    // 5. X√≥a post1 v√† comments c·ªßa n√≥ (gi·ªëng logic hi·ªán t·∫°i)
    console.log("5. X√≥a post1 v√† comments...");
    await session.run(`
      MATCH (c:Comment)-[:ABOUT]->(p:Post {id: 'testPost1'}) DETACH DELETE c;
      MATCH (p:Post {id: 'testPost1'}) DETACH DELETE p;
    `);

    // 6. Ki·ªÉm tra UserB c√≤n comment g√¨ kh√¥ng
    const afterDeleteComments = await session.run(`
      MATCH (userB:User {id: 'testB'})-[:COMMENTED]->(c:Comment) 
      RETURN count(c) as commentCount
    `);
    console.log(
      `6. Sau khi x√≥a post1, UserB c√≤n comments: ${afterDeleteComments.records[0].get(
        "commentCount"
      )}`
    );

    // 7. Ch·∫°y query cleanup HI·ªÜN T·∫†I (c√≥ bug)
    console.log("7. Ch·∫°y query cleanup HI·ªÜN T·∫†I...");
    const cleanupResult = await session.run(`
      MATCH (u1:User)-[r:REPLIED_TO]->(u2:User)
      WHERE NOT EXISTS((u1)-[:COMMENTED]->(:Comment)) OR NOT EXISTS((u2)-[:COMMENTED]->(:Comment))
      RETURN count(r) as willBeDeleted
    `);
    console.log(
      `   REPLIED_TO s·∫Ω b·ªã x√≥a: ${cleanupResult.records[0].get(
        "willBeDeleted"
      )}`
    );

    // Th·ª±c t·∫ø x√≥a ƒë·ªÉ test
    await session.run(`
      MATCH (u1:User)-[r:REPLIED_TO]->(u2:User)
      WHERE NOT EXISTS((u1)-[:COMMENTED]->(:Comment)) OR NOT EXISTS((u2)-[:COMMENTED]->(:Comment))
      DELETE r
    `);

    // 8. Ki·ªÉm tra k·∫øt qu·∫£
    const afterCleanup = await session.run(`
      MATCH (userA:User {id: 'testA'})-[r:REPLIED_TO]->(userB:User {id: 'testB'}) 
      RETURN count(r) as replyToCount
    `);
    console.log(
      `8. Sau cleanup, REPLIED_TO c√≤n l·∫°i: ${afterCleanup.records[0].get(
        "replyToCount"
      )}`
    );

    // 9. K·∫øt lu·∫≠n
    if (afterCleanup.records[0].get("replyToCount") === 0) {
      console.log(
        "‚ùå BUG: REPLIED_TO b·ªã x√≥a nh·∫ßm! UserB v·∫´n c√≤n comment ·ªü post2 m√†!"
      );
    } else {
      console.log("‚úÖ OK: REPLIED_TO ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë√∫ng");
    }
  } catch (error) {
    console.error("‚ùå L·ªói test:", error);
  } finally {
    await session.close();
  }
}

testReplyToBug();
